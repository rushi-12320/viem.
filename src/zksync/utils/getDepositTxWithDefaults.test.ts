import { expect, test } from 'vitest'
import {
  mockDepositSpecification,
  zkSyncClientLocalNodeWithAccount,
} from '~test/src/zksync.js'
import { mockClientPublicActionsL2 } from '~test/src/zksyncPublicActionsL2MockData.js'
import { getDepositTxWithDefaults } from './getDepositTxWithDefaults.js'

const client = { ...zkSyncClientLocalNodeWithAccount }

mockClientPublicActionsL2(client)

test('getDepositTxWithDefaults', async () => {
  const depositTxDefaults = await getDepositTxWithDefaults(
    client,
    mockDepositSpecification,
  )
  expect(depositTxDefaults).toMatchInlineSnapshot(`
  {
    "amount": 5n,
    "approveBaseOverrides": {},
    "approveERC20": true,
    "approveOverrides": {},
    "bridgeAddresses": {
      "erc20L1": "0xbe270c78209cfda84310230aaa82e18936310b2e",
      "sharedL1": "0x648afeaf09a3db988ac41b786001235bbdbc7640",
      "sharedL2": "0xfd61c893b903fa133908ce83dfef67c4c2350dd8",
    },
    "bridgehubContractAddress": "0x173999892363ba18c9dc60f8c57152fc914bce89",
    "eRC20DefaultBridgeData": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e
    "gasPerPubdataByte": 800n,
    "l2ChainId": 270n,
    "l2GasLimit": 123456789n,
    "operatorTip": 0n,
    "overrides": {
      "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
      "maxFeePerGas": 150000000100n,
      "maxPriorityFeePerGas": 150000000000n,
    },
    "refundRecipient": "0x36615Cf349d7F6344891B1e7CA7C72883F5dc049",
    "to": "0x36615Cf349d7F6344891B1e7CA7C72883F5dc049",
    "token": "0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55",
  }
  `)
})

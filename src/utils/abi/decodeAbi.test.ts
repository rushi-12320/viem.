import { describe, expect, test } from 'vitest'
import { decodeParameters } from '@zoltu/ethereum-abi-encoder'

import {
  Abi,
  AbiFunction,
  ExtractAbiFunction,
  ExtractAbiFunctionNames,
} from 'abitype'

import { mixedAbi } from '../../../test'
import { decodeAbi } from './decodeAbi'
import { hexToBytes } from '../encoding'

export function extractFunction<
  TAbi extends Abi,
  TName extends ExtractAbiFunctionNames<TAbi>,
>({
  abi,
  name,
}: {
  abi: TAbi
  name: TName
}): ExtractAbiFunction<TAbi, TName> {
  return (abi.find(
    (abi) => abi.type === 'function' && abi.name === name,
  ) as AbiFunction & {
    type: 'function'
  })! as ExtractAbiFunction<TAbi, TName>
}

describe('static', () => {
  test('uint', () => {
    expect(
      decodeAbi({
        data: '0x0000000000000000000000000000000000000000000000000000000000010f2c',
        params: extractFunction({
          abi: mixedAbi,
          name: 'staticUint',
        }).inputs,
      }),
    ).toEqual([69420n])
  })

  test('uint8', () => {
    expect(
      decodeAbi({
        data: '0x0000000000000000000000000000000000000000000000000000000000000020',
        params: [
          {
            internalType: 'uint8',
            name: 'foo',
            type: 'uint8',
          },
        ],
      }),
    ).toEqual([32])
  })

  test('uint32', () => {
    expect(
      decodeAbi({
        data: '0x0000000000000000000000000000000000000000000000000000000000010f2c',
        params: [
          {
            internalType: 'uint32',
            name: 'foo',
            type: 'uint32',
          },
        ],
      }),
    ).toEqual([69420])
  })

  describe('int', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x0000000000000000000000000000000000000000000000000000000000010f2c',
          params: [
            {
              internalType: 'int',
              name: 'foo',
              type: 'int',
            },
          ],
        }),
      ).toEqual([69420n])
    })

    test('negative (twos compliment)', () => {
      expect(
        decodeAbi({
          data: '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef0d4',
          params: [
            {
              internalType: 'int',
              name: 'foo',
              type: 'int',
            },
          ],
        }),
      ).toEqual([-69420n])
    })
  })

  describe('int8', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x000000000000000000000000000000000000000000000000000000000000007f',
          params: [
            {
              internalType: 'int8',
              name: 'foo',
              type: 'int8',
            },
          ],
        }),
      ).toEqual([127])
    })

    test('negative (twos compliment)', () => {
      expect(
        decodeAbi({
          data: '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80',
          params: [
            {
              internalType: 'int8',
              name: 'foo',
              type: 'int8',
            },
          ],
        }),
      ).toEqual([-128])
    })
  })

  describe('int32', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x000000000000000000000000000000000000000000000000000000007fffffff',
          params: [
            {
              internalType: 'int32',
              name: 'foo',
              type: 'int32',
            },
          ],
        }),
      ).toEqual([2147483647])
    })

    test('negative (twos compliment)', () => {
      expect(
        decodeAbi({
          data: '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000',
          params: [
            {
              internalType: 'int32',
              name: 'foo',
              type: 'int32',
            },
          ],
        }),
      ).toEqual([-2147483648])
    })
  })

  describe('address', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000014dc79964da2c08b23698b3d3cc7ca32193d9955',
          params: [
            {
              internalType: 'address',
              name: 'foo',
              type: 'address',
            },
          ],
        }),
      ).toEqual(['0x14dC79964da2C08b23698B3D3cc7Ca32193d9955'])
    })
  })

  describe('bytes8', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x0123456789abcdef000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'staticBytes8',
          }).inputs,
        }),
      ).toEqual(['0x0123456789abcdef'])
    })
  })

  describe('bytes16', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x0123456789abcdef0123456789abcdef00000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'staticBytes16',
          }).inputs,
        }),
      ).toEqual(['0x0123456789abcdef0123456789abcdef'])
    })
  })

  describe('uint[3]', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x0000000000000000000000000000000000000000000000000000000000010f2c000000000000000000000000000000000000000000000000000000000000a45500000000000000000000000000000000000000000000000000000000190f1b44',
          params: extractFunction({
            abi: mixedAbi,
            name: 'staticUintArray',
          }).inputs,
        }),
      ).toEqual([[69420n, 42069n, 420420420n]])
    })
  })

  describe('int[3]', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x0000000000000000000000000000000000000000000000000000000000010f2cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5bab00000000000000000000000000000000000000000000000000000000190f1b44',
          params: extractFunction({
            abi: mixedAbi,
            name: 'staticIntArray',
          }).inputs,
        }),
      ).toEqual([[69420n, -42069n, 420420420n]])
    })
  })

  describe('address[2]', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x000000000000000000000000c961145a54c96e3ae9baa048c4f4d6b04c13916b000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',
          params: extractFunction({
            abi: mixedAbi,
            name: 'staticAddressArray',
          }).inputs,
        }),
      ).toEqual([
        [
          '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',
          '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
        ],
      ])
    })
  })

  describe('bool[2]', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'staticBooleanArray',
          }).inputs,
        }),
      ).toEqual([[true, false]])
    })
  })

  describe('uint[3][2]', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x0000000000000000000000000000000000000000000000000000000000010f2c000000000000000000000000000000000000000000000000000000000000a45500000000000000000000000000000000000000000000000000000000190f1b4400000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000001a6',
          params: extractFunction({
            abi: mixedAbi,
            name: 'staticUintNestedArray',
          }).inputs,
        }),
      ).toEqual([
        [
          [69420n, 42069n, 420420420n],
          [420n, 44n, 422n],
        ],
      ])
    })
  })

  describe('uint[3][2][4]', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f
          params: extractFunction({
            abi: mixedAbi,
            name: 'staticUintNestedArray2',
          }).inputs,
        }),
      ).toEqual([
        [
          [
            [1n, 2n, 3n],
            [4n, 5n, 6n],
          ],
          [
            [7n, 8n, 9n],
            [10n, 11n, 12n],
          ],
          [
            [13n, 14n, 15n],
            [16n, 17n, 18n],
          ],
          [
            [19n, 20n, 21n],
            [22n, 23n, 24n],
          ],
        ],
      ])
    })
  })

  describe('struct: (uint256,bool,address)', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',
          params: [
            {
              components: [
                {
                  internalType: 'uint256',
                  name: 'x',
                  type: 'uint256',
                },
                {
                  internalType: 'bool',
                  name: 'y',
                  type: 'bool',
                },
                {
                  internalType: 'address',
                  name: 'z',
                  type: 'address',
                },
              ],
              internalType: 'struct ABIExample.Foo',
              name: 'fooOut',
              type: 'tuple',
            },
          ],
        }),
      ).toEqual([
        { x: 420n, y: true, z: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC' },
      ])
    })
  })

  describe('struct: (uint256,bool,address)', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',
          params: [
            {
              components: [
                {
                  internalType: 'uint256',
                  type: 'uint256',
                },
                {
                  internalType: 'bool',
                  type: 'bool',
                },
                {
                  internalType: 'address',
                  type: 'address',
                },
              ],
              internalType: 'struct ABIExample.Foo',
              name: 'fooOut',
              type: 'tuple',
            },
          ],
        }),
      ).toEqual([[420n, true, '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']])
    })
  })

  describe('struct: (uint256,bool,address)', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',
          params: [
            {
              components: [
                {
                  internalType: 'uint256',
                  name: 'x',
                  type: 'uint256',
                },
                {
                  internalType: 'bool',
                  type: 'bool',
                },
                {
                  internalType: 'address',
                  name: 'z',
                  type: 'address',
                },
              ],
              internalType: 'struct ABIExample.Foo',
              name: 'fooOut',
              type: 'tuple',
            },
          ],
        }),
      ).toEqual([[420n, true, '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']])
    })
  })

  describe('struct: ((uint256,bool,address),(uint256,bool,address),uint8[2])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c961145a54c96e3ae9baa048c4f4d6b04c13916b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002',
          params: extractFunction({
            abi: mixedAbi,
            name: 'staticStruct2',
          }).inputs,
        }),
      ).toEqual([
        {
          foo: {
            x: 420n,
            y: true,
            z: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
          },
          baz: {
            x: 69n,
            y: false,
            z: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',
          },
          x: [1, 2],
        },
      ])
    })
  })

  describe('(uint256[2],bool,string[])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000057761676d6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047669656d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036c6f6c0000000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'uintArrayBoolStringArrayReturn',
          }).outputs,
        }),
      ).toEqual([[420n, 69n], true, ['wagmi', 'viem', 'lol']])
    })
  })

  describe('(uint256[2],bool,string[])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000057761676d6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047669656d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036c6f6c0000000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'uintArrayBoolStringArrayReturn',
          }).outputs,
        }),
      ).toEqual([[420n, 69n], true, ['wagmi', 'viem', 'lol']])
    })
  })

  describe('multiple params: (uint,bool,address)', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c961145a54c96e3ae9baa048c4f4d6b04c13916b',
          params: extractFunction({
            abi: mixedAbi,
            name: 'uintBoolAddress',
          }).inputs,
        }),
      ).toEqual([420n, true, '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b'])
    })
  })

  describe('multiple params unnamed: (uint,bool,address)', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c961145a54c96e3ae9baa048c4f4d6b04c13916b',
          params: extractFunction({
            abi: mixedAbi,
            name: 'uintBoolAddressReturnUnnamed',
          }).outputs,
        }),
      ).toEqual([420n, true, '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b'])
    })
  })
})

describe('dynamic', () => {
  describe('(string)', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicString',
          }).outputs,
        }),
      ).toEqual(['wagmi'])
    })
  })

  describe('(string,uint,bool)', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'stringUintBool',
          }).inputs,
        }),
      ).toEqual(['wagmi', 420n, true])
    })
  })

  describe('(uint[2],bool,string)', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'uintArrayBoolString',
          }).inputs,
        }),
      ).toEqual([[420n, 69n], true, 'wagmi'])
    })
  })

  describe('(bytes)', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030420690000000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicBytes',
          }).inputs,
        }),
      ).toEqual(['0x042069'])
    })
  })

  describe('(uint256[][2])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: [
            {
              internalType: 'uint256[][2]',
              name: 'test',
              type: 'uint256[][2]',
            },
          ],
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e
        }),
      ).toEqual([
        [
          [1n, 2n, 3n, 4n],
          [3n, 2n, 1n],
        ],
      ])
    })
  })

  describe('(uint256[2][][2])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: [
            {
              internalType: 'uint256[2][][2]',
              name: 'test',
              type: 'uint256[2][][2]',
            },
          ],
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000b',
        }),
      ).toEqual([
        [
          [
            [1n, 2n],
            [4n, 5n],
          ],
          [
            [8n, 9n],
            [10n, 11n],
          ],
        ],
      ])
    })
  })

  describe('(uint256[][][2])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: [
            {
              internalType: 'uint256[][][2]',
              name: 'test',
              type: 'uint256[][][2]',
            },
          ],
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ca',
        }),
      ).toEqual([
        [
          [
            [1n, 2n, 3n],
            [4n, 5n, 6n, 7n],
          ],
          [[8n], [9n, 10n]],
        ],
      ])
    })
  })

  describe('(uint256[][1][1])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: [
            {
              internalType: 'uint256[][1][1]',
              name: 'test',
              type: 'uint256[][1][1]',
            },
          ],
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003',
        }),
      ).toEqual([[[[1n, 2n, 3n]]]])
    })
  })

  describe('(uint256[][2][2])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: [
            {
              internalType: 'uint256[][2][2]',
              name: 'test',
              type: 'uint256[][2][2]',
            },
          ],
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ca',
        }),
      ).toEqual([
        [
          [
            [1n, 2n, 3n],
            [4n, 5n, 6n, 7n],
          ],
          [[8n], [9n, 10n]],
        ],
      ])
    })
  })

  describe('(uint256[][3][2])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: [
            {
              internalType: 'uint256[][3][2]',
              name: 'test',
              type: 'uint256[][3][2]',
            },
          ],
          data: '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000011',
        }),
      ).toEqual([
        [
          [
            [1n, 2n, 3n],
            [4n, 5n, 6n, 7n],
            [8n, 9n, 10n],
          ],
          [[11n], [12n, 13n], [14n, 15n, 16n, 17n]],
        ],
      ])
    })
  })

  describe('(uint256[][2][3])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: [
            {
              internalType: 'uint256[][2][3]',
              name: 'test',
              type: 'uint256[][2][3]',
            },
          ],
          data: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000011',
        }),
      ).toEqual([
        [
          [
            [1n, 2n],
            [3n, 4n, 5n],
          ],
          [
            [6n, 7n, 8n],
            [9n, 10n],
          ],
          [
            [11n, 12n, 13n],
            [14n, 15n, 16n, 17n],
          ],
        ],
      ])
    })
  })

  describe('(uint256[][2][3][4])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: [
            {
              internalType: 'uint256[][2][3][4]',
              name: 'test',
              type: 'uint256[][2][3][4]',
            },
          ],
          data: '
        }),
      ).toMatchInlineSnapshot(`
        [
          [
            [
              [
                [
                  1n,
                  2n,
                  3n,
                ],
                [
                  4n,
                  5n,
                  6n,
                  7n,
                ],
              ],
              [
                [
                  8n,
                ],
                [
                  9n,
                  10n,
                ],
              ],
              [
                [
                  11n,
                  12n,
                ],
                [
                  13n,
                ],
              ],
            ],
            [
              [
                [
                  14n,
                  15n,
                ],
                [
                  16n,
                  17n,
                  18n,
                ],
              ],
              [
                [
                  0n,
                  1n,
                ],
                [
                  2n,
                  3n,
                  4n,
                ],
              ],
              [
                [
                  5n,
                  6n,
                ],
                [
                  1n,
                  2n,
                  1n,
                ],
              ],
            ],
            [
              [
                [
                  1n,
                  2n,
                  1n,
                  2n,
                ],
                [
                  1n,
                  5n,
                  6n,
                ],
              ],
              [
                [
                  1n,
                ],
                [
                  2n,
                ],
              ],
              [
                [
                  1n,
                  2n,
                  3n,
                ],
                [
                  5n,
                  6n,
                  7n,
                ],
              ],
            ],
            [
              [
                [
                  9n,
                  8n,
                  7n,
                ],
                [
                  5n,
                  5n,
                  5n,
                ],
              ],
              [
                [
                  1n,
                  2n,
                  3n,
                ],
                [
                  4n,
                  4n,
                  4n,
                ],
              ],
              [
                [
                  5n,
                  5n,
                  5n,
                ],
                [
                  6n,
                  6n,
                  6n,
                ],
              ],
            ],
          ],
        ]
      `)
    })
  })

  describe('(uint256[2][][2])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: [
            {
              internalType: 'uint256[2][][2]',
              name: 'test',
              type: 'uint256[2][][2]',
            },
          ],
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a',
        }),
      ).toEqual([
        [
          [
            [1n, 2n],
            [4n, 5n],
          ],
          [
            [8n, 9n],
            [10n, 11n],
            [9n, 10n],
          ],
        ],
      ])
    })
  })

  describe('(uint[])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicUintArray',
          }).inputs,
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000037',
        }),
      ).toEqual([[420n, 69n, 22n, 55n]])
    })

    test('empty', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicUintArray',
          }).inputs,
        }),
      ).toEqual([[]])
    })
  })

  describe('(uint[][])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicUintNestedArray',
          }).inputs,
          data: '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000045',
        }),
      ).toEqual([[[420n, 69n]]])
    })

    test('empty', () => {
      expect(
        decodeAbi({
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicUintNestedArray',
          }).inputs,
        }),
      ).toEqual([[[]]])
    })

    test('complex', () => {
      expect(
        // cast abi-encode "a(uint[][])" "[[420,69],[22,55,22],[51,52,66,11]]"
        decodeAbi({
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicUintNestedArray',
          }).inputs,
          data: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000003700000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003300000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000000b',
        }),
      ).toEqual([
        [
          [420n, 69n],
          [22n, 55n, 22n],
          [51n, 52n, 66n, 11n],
        ],
      ])
    })
  })

  describe('(string[2])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000057761676d6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047669656d00000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicStringStaticArray',
          }).inputs,
        }),
      ).toEqual([['wagmi', 'viem']])
    })
  })

  describe('(string[2][3])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000057761676d6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047669656d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000046a616b65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003746f6d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000036c6f6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046861686100000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicStringNestedStaticArray',
          }).inputs,
        }),
      ).toMatchInlineSnapshot([
        [
          ['wagmi', 'viem'],
          ['jake', 'tom'],
          ['lol', 'haha'],
        ],
      ])
    })
  })

  describe('((uint256[],bool,string[]))', () => {
    test('default', () => {
      expect(
        // cast abi-encode "a((uint256[],bool,string[]))" "([1,2,3,4],true,[hello,world])"
        decodeAbi({
          data: '0xc6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005776f726c64000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicStruct',
          }).inputs,
        }),
      ).toMatchInlineSnapshot([
        {
          x: [1n, 2n, 3n, 4n],
          y: true,
          z: ['hello', 'world'],
        },
      ])
    })
  })

  describe('(((uint256[],bool,string[])),uint256,string[])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001ac6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005776f726c6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000057761676d6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047669656d00000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicStruct2',
          }).inputs,
        }),
      ).toEqual([
        {
          foo: {
            x: [1n, 2n, 3n, 4n],
            y: true,
            z: ['hello', 'world'],
          },
          a: 420n,
          b: ['wagmi', 'viem'],
        },
      ])
    })
  })

  describe('(((uint256[],bool,string[])),uint256,string[])', () => {
    test('default', () => {
      expect(
        decodeAbi({
          data: '0xc6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005776f726c640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000004026aa0000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000046e696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004686168610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000057761676d690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006616c6c646179000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000010f2c00000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000004746869730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000161000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005706172616d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005746865726500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000036c6f6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046861686100000000000000000000000000000000000000000000000000000000',
          params: extractFunction({
            abi: mixedAbi,
            name: 'dynamicStructParams',
          }).inputs,
        }),
      ).toEqual([
        {
          x: [1n, 2n, 3n, 4n],
          y: true,
          z: ['hello', 'world'],
        },
        {
          foo: {
            a: 420n,
            b: ['wagmi', 'allday'],
            foo: {
              x: [420n, 69n],
              y: true,
              z: ['nice', 'haha'],
            },
          },
          bar: {
            a: 69420n,
            b: ['hello', 'there'],
            foo: {
              x: [420n, 420n],
              y: true,
              z: ['this', 'is', 'a', 'param'],
            },
          },
          c: 4204202n,
          d: ['lol', 'haha'],
        },
      ])
    })
  })
})

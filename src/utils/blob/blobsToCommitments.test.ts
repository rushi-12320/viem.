import { expect, test } from 'vitest'
import { kzg } from '../../../test/src/kzg.js'
import { stringToBytes, stringToHex } from '../index.js'
import { blobsToCommitments } from './blobsToCommitments.js'
import { toBlobs } from './toBlobs.js'

test('from hex', () => {
  const blobs = toBlobs(stringToHex('abcd'.repeat(50000)))
  const commitments = blobsToCommitments(blobs, kzg)
  expect(commitments).toMatchInlineSnapshot(`
    [
      "0x91e762667295f51030bc928a02fa2930744773df4f88ace99b96464c255b2ffcd67ee0f211b085439b4eca10ddc61445",
      "0x8ce9d03db3155bf6bd6f1205404d1446cf69cd2243fd9d11de79b75adfc67697185d8d7868673768f4f0b86f0c593890",
    ]
  `)
})

test('from bytes', () => {
  const blobs = toBlobs(stringToHex('abcd'.repeat(50000)), 'bytes')
  const commitments = blobsToCommitments(blobs, kzg)
  expect(commitments).toMatchInlineSnapshot(`
    [
      Uint8Array [
        145,
        231,
        98,
        102,
        114,
        149,
        245,
        16,
        48,
        188,
        146,
        138,
        2,
        250,
        41,
        48,
        116,
        71,
        115,
        223,
        79,
        136,
        172,
        233,
        155,
        150,
        70,
        76,
        37,
        91,
        47,
        252,
        214,
        126,
        224,
        242,
        17,
        176,
        133,
        67,
        155,
        78,
        202,
        16,
        221,
        198,
        20,
        69,
      ],
      Uint8Array [
        140,
        233,
        208,
        61,
        179,
        21,
        91,
        246,
        189,
        111,
        18,
        5,
        64,
        77,
        20,
        70,
        207,
        105,
        205,
        34,
        67,
        253,
        157,
        17,
        222,
        121,
        183,
        90,
        223,
        198,
        118,
        151,
        24,
        93,
        141,
        120,
        104,
        103,
        55,
        104,
        244,
        240,
        184,
        111,
        12,
        89,
        56,
        144,
      ],
    ]
  `)
})

test('to hex', () => {
  const blobs = toBlobs(stringToBytes('abcd'.repeat(50000)))
  const commitments = blobsToCommitments(blobs, kzg, 'hex')
  expect(commitments).toMatchInlineSnapshot(`
    [
      "0x91e762667295f51030bc928a02fa2930744773df4f88ace99b96464c255b2ffcd67ee0f211b085439b4eca10ddc61445",
      "0x8ce9d03db3155bf6bd6f1205404d1446cf69cd2243fd9d11de79b75adfc67697185d8d7868673768f4f0b86f0c593890",
    ]
  `)
})

test('to bytes', () => {
  const blobs = toBlobs(stringToHex('abcd'.repeat(50000)))
  const commitments = blobsToCommitments(blobs, kzg, 'bytes')
  expect(commitments).toMatchInlineSnapshot(`
    [
      Uint8Array [
        145,
        231,
        98,
        102,
        114,
        149,
        245,
        16,
        48,
        188,
        146,
        138,
        2,
        250,
        41,
        48,
        116,
        71,
        115,
        223,
        79,
        136,
        172,
        233,
        155,
        150,
        70,
        76,
        37,
        91,
        47,
        252,
        214,
        126,
        224,
        242,
        17,
        176,
        133,
        67,
        155,
        78,
        202,
        16,
        221,
        198,
        20,
        69,
      ],
      Uint8Array [
        140,
        233,
        208,
        61,
        179,
        21,
        91,
        246,
        189,
        111,
        18,
        5,
        64,
        77,
        20,
        70,
        207,
        105,
        205,
        34,
        67,
        253,
        157,
        17,
        222,
        121,
        183,
        90,
        223,
        198,
        118,
        151,
        24,
        93,
        141,
        120,
        104,
        103,
        55,
        104,
        244,
        240,
        184,
        111,
        12,
        89,
        56,
        144,
      ],
    ]
  `)
})

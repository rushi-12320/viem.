import { expect, test } from 'vitest'
import { kzg } from '../../../test/src/kzg.js'
import { stringToBytes, stringToHex } from '../index.js'
import { blobsToCommitments } from './blobsToCommitments.js'
import { computeBlobProofs } from './computeBlobProofs.js'
import { toBlobs } from './toBlobs.js'

test('from hex', () => {
  const blobs = toBlobs(stringToHex('abcd'.repeat(50000)))
  const commitments = blobsToCommitments(blobs, kzg)
  expect(computeBlobProofs(blobs, commitments, kzg)).toMatchInlineSnapshot(`
    [
      "0x9957ae6d2755b91bd099944c40c52aec45b843a01b9671915ab544ca97c9694caf27a47394aadde5123cd6096fe65250",
      "0xaa5694d541a1fcc297e7801d0df7f8e984b6def23d20381b644f4acf44741f4854f59901080275d1084afc7d5ae7c53e",
    ]
  `)
  expect(
    computeBlobProofs(blobs, commitments, kzg, 'bytes'),
  ).toMatchInlineSnapshot(`
    [
      Uint8Array [
        153,
        87,
        174,
        109,
        39,
        85,
        185,
        27,
        208,
        153,
        148,
        76,
        64,
        197,
        42,
        236,
        69,
        184,
        67,
        160,
        27,
        150,
        113,
        145,
        90,
        181,
        68,
        202,
        151,
        201,
        105,
        76,
        175,
        39,
        164,
        115,
        148,
        170,
        221,
        229,
        18,
        60,
        214,
        9,
        111,
        230,
        82,
        80,
      ],
      Uint8Array [
        170,
        86,
        148,
        213,
        65,
        161,
        252,
        194,
        151,
        231,
        128,
        29,
        13,
        247,
        248,
        233,
        132,
        182,
        222,
        242,
        61,
        32,
        56,
        27,
        100,
        79,
        74,
        207,
        68,
        116,
        31,
        72,
        84,
        245,
        153,
        1,
        8,
        2,
        117,
        209,
        8,
        74,
        252,
        125,
        90,
        231,
        197,
        62,
      ],
    ]
  `)
})

test('from bytes', () => {
  const blobs = toBlobs(stringToBytes('abcd'.repeat(50000)))
  const commitments = blobsToCommitments(blobs, kzg)
  expect(computeBlobProofs(blobs, commitments, kzg)).toMatchInlineSnapshot(`
    [
      Uint8Array [
        153,
        87,
        174,
        109,
        39,
        85,
        185,
        27,
        208,
        153,
        148,
        76,
        64,
        197,
        42,
        236,
        69,
        184,
        67,
        160,
        27,
        150,
        113,
        145,
        90,
        181,
        68,
        202,
        151,
        201,
        105,
        76,
        175,
        39,
        164,
        115,
        148,
        170,
        221,
        229,
        18,
        60,
        214,
        9,
        111,
        230,
        82,
        80,
      ],
      Uint8Array [
        170,
        86,
        148,
        213,
        65,
        161,
        252,
        194,
        151,
        231,
        128,
        29,
        13,
        247,
        248,
        233,
        132,
        182,
        222,
        242,
        61,
        32,
        56,
        27,
        100,
        79,
        74,
        207,
        68,
        116,
        31,
        72,
        84,
        245,
        153,
        1,
        8,
        2,
        117,
        209,
        8,
        74,
        252,
        125,
        90,
        231,
        197,
        62,
      ],
    ]
  `)
  expect(
    computeBlobProofs(blobs, commitments, kzg, 'hex'),
  ).toMatchInlineSnapshot(`
    [
      "0x9957ae6d2755b91bd099944c40c52aec45b843a01b9671915ab544ca97c9694caf27a47394aadde5123cd6096fe65250",
      "0xaa5694d541a1fcc297e7801d0df7f8e984b6def23d20381b644f4acf44741f4854f59901080275d1084afc7d5ae7c53e",
    ]
  `)
})
